#!/usr/bin/env node

var Crawler = require('x-ray-crawler');
var Context = require('http-context');
var cheerio = require('cheerio');
var pj = require('prettyjson');
var isUrl = require('is-url');
var chalk = require('chalk');
var repl = require('repl');
var Xray = require('../');
var fs = require('fs');
var slice = [].slice;
var actions = {};

/**
 * Locals
 */

var highlight = require('../lib/highlight');
var isHTML = require('../lib/is-html');
var pretty = require('../lib/pretty');
var params = require('../lib/params');

/**
 * Default state
 */

var xray = Xray()
var request = Crawler();
var ctx = Context();

/**
 * Help
 */

var help = [
  '',
  '  usage: ',
  '',
  '      load <url|selector|html>',
  '      paginate <attribute>',
  '      select [scope] <selector>',
  '      html',
  ''
].join('\n');

/**
 * Regexps
 */

var rcmd = /^(help|load|paginate|select|\$)/i;

/**
 * Start the repl
 */

repl.start({
  prompt: 'xray > ',
  input: process.stdin,
  output: process.stdout,
  ignoreUndefined: true,
  eval: evaluate
});

/**
 * Evaluate the input
 */

function evaluate(cmd, ctx, filename, fn) {
  cmd = cmd.replace(/[\(\n\)]/g, '');
  if (!cmd) return fn(null, undefined);
  var args = cmd.split(' ');
  cmd = args.shift().toLowerCase();
  if ('help' == cmd || !rcmd.test(cmd)) {
    console.log(help);
    return fn(null, undefined);
  }

  actions[cmd].apply(null, args.concat(function(err, val) {
    if (err) return fn(err);
    else if (val) console.log(val);
    fn(null, undefined);
  }));
}

/**
 * Load
 */

actions.load = function load(url, fn) {
  if (arguments.length == 1) {
    fn = url;
    return fn(null, help);
  }

  if (isUrl(url)) {
    success('loading: %s', url);
    request(url, function(err, res) {
      if (err) return fn(err);
      ctx.status = res.status;
      ctx.body = res.body;
      success('loaded: %s', res.url);
      console.log(pretty(res.url));
      fn(null);
    })
  } else if (isHTML(url)) {
    success('loading: <html string>');
    ctx.status = 200;
    ctx.body = url;
    success('loaded: <html string>');
    console.log(pretty(url));
    fn(null);
  } else {
    success('loading: %s', url);
    fs.readFile(url, 'utf8', function(err, str) {
      if (err) return fn(err);
      ctx.status = 200;
      ctx.body = str;
      success('loaded: %s', url);
      response(pretty(str));
      fn(null);
    })
  }
}

/**
 * Select
 */

actions.select =
actions.$ = function select(scope, selector, fn) {
  if (arguments.length == 1) {
    response(ctx.body);
    fn(null);
    return;
  } else if (arguments.length == 2) {
    fn = selector;
    selector = coerce(scope);
    scope = null;
  } else {
    scope = coerce(scope);
    selector = coerce(selector);
  }

  var $ = cheerio.load(ctx.body);
  $ = highlight($, scope, selector);
  var html = $.html();
  response(html);
  fn(null);
}

/**
 * string(...)
 */

function string(str) {
  str = unstring(str);
  return '"' + str + '"';
}

/**
 * unstring(str)
 */

function unstring(str) {
  return str.replace(/^['"]|['"]$/g, '');
}

/**
 * coerce
 */

function coerce(str) {
  return '[' == str[0] && ']' == str[str.length - 1]
    ? [str.slice(1, -1)]
    : str;
}

/**
 * Success
 */

function success(str) {
  var args = slice.call(arguments).slice(1);
  console.error.apply(console.error, [chalk.green('  ' + str)].concat(args));
}

function response(str) {
  var args = slice.call(arguments).slice(1);
  console.error.apply(console.error, [chalk.gray('  ' + str)].concat(args));
}

/**
 * Error
 */

function error(str) {
  var args = slice.call(arguments).slice(1);
  console.error.apply(console.error, [chalk.red('  ' + str)].concat(args));
}
